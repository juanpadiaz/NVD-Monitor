# Script adicional para completar la instalación - uninstall.sh
#!/bin/bash

# NVD Vulnerability Monitor - Script de Desinstalación
# Para Ubuntu 24.04

set -e

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Verificar que se ejecuta como root
if [[ $EUID -ne 0 ]]; then
   log_error "Este script debe ejecutarse como root"
   exit 1
fi

echo "=================================="
echo "  NVD Monitor - Desinstalación"
echo "=================================="
echo

log_warn "Esta acción eliminará completamente NVD Monitor del sistema"
log_warn "Se conservarán los respaldos de base de datos en /var/lib/nvd-monitor/"
echo

read -p "¿Está seguro de que desea continuar? (y/N): " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "Desinstalación cancelada"
    exit 0
fi

# Detener y deshabilitar servicio
log_info "Deteniendo servicio..."
systemctl stop nvd-monitor || true
systemctl disable nvd-monitor || true

# Eliminar archivos del servicio
log_info "Eliminando servicio systemd..."
rm -f /etc/systemd/system/nvd-monitor.service
systemctl daemon-reload

# Eliminar comandos globales
log_info "Eliminando comandos globales..."
rm -f /usr/local/bin/nvd-monitor
rm -f /usr/local/bin/nvd-admin

# Eliminar aplicación
log_info "Eliminando aplicación..."
rm -rf /opt/nvd-monitor

# Preguntar sobre configuración
echo
read -p "¿Eliminar archivos de configuración? (y/N): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    log_info "Eliminando configuración..."
    rm -rf /etc/nvd-monitor
fi

# Preguntar sobre logs
echo
read -p "¿Eliminar archivos de logs? (y/N): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    log_info "Eliminando logs..."
    rm -rf /var/log/nvd-monitor
fi

# Preguntar sobre datos
echo
read -p "¿Eliminar datos y respaldos? (y/N): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    log_warn "¡ATENCIÓN! Esto eliminará todos los respaldos de base de datos"
    read -p "¿Confirma? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        log_info "Eliminando datos..."
        rm -rf /var/lib/nvd-monitor
    fi
fi

# Eliminar usuario del sistema
log_info "Eliminando usuario del sistema..."
userdel nvd-monitor 2>/dev/null || true

log_info "Desinstalación completada"
echo
echo "Nota: La base de datos MySQL y las dependencias del sistema"
echo "no han sido eliminadas. Elimínelas manualmente si es necesario."

# =====================================
# Script de backup automatizado - backup.sh
# =====================================

cat > /tmp/backup.sh << 'EOF'
#!/bin/bash

# NVD Monitor - Script de Backup Automatizado

set -e

BACKUP_DIR="/var/lib/nvd-monitor/backups"
CONFIG_FILE="/etc/nvd-monitor/config.ini"
DATE=$(date +%Y%m%d_%H%M%S)
RETENTION_DAYS=30

# Crear directorio de backups si no existe
mkdir -p "$BACKUP_DIR"

# Función para leer configuración
get_config_value() {
    local section=$1
    local key=$2
    grep -A 10 "^\[$section\]" "$CONFIG_FILE" | grep "^$key" | cut -d'=' -f2 | tr -d ' '
}

# Leer configuración de base de datos
DB_HOST=$(get_config_value "database" "host")
DB_PORT=$(get_config_value "database" "port")
DB_NAME=$(get_config_value "database" "database")
DB_USER=$(get_config_value "database" "user")
DB_PASS=$(get_config_value "database" "password")

# Crear backup
BACKUP_FILE="$BACKUP_DIR/nvd_monitor_backup_$DATE.sql"

echo "Creando backup de base de datos..."
mysqldump \
    --host="$DB_HOST" \
    --port="$DB_PORT" \
    --user="$DB_USER" \
    --password="$DB_PASS" \
    --single-transaction \
    --routines \
    --triggers \
    --events \
    "$DB_NAME" > "$BACKUP_FILE"

# Comprimir backup
gzip "$BACKUP_FILE"
BACKUP_FILE="$BACKUP_FILE.gz"

echo "Backup creado: $BACKUP_FILE"

# Backup de configuración
cp "$CONFIG_FILE" "$BACKUP_DIR/config_backup_$DATE.ini"

# Limpiar backups antiguos
find "$BACKUP_DIR" -name "*.sql.gz" -mtime +$RETENTION_DAYS -delete
find "$BACKUP_DIR" -name "config_backup_*.ini" -mtime +$RETENTION_DAYS -delete

echo "Backup completado exitosamente"

# Enviar notificación opcional
if command -v nvd-admin &> /dev/null; then
    echo "Backup completado el $(date)" | mail -s "NVD Monitor - Backup Completado" admin@localhost || true
fi
EOF

chmod +x /tmp/backup.sh

# =====================================
# Script de monitoreo de salud - health-check.sh
# =====================================

cat > /tmp/health-check.sh << 'EOF'
#!/bin/bash

# NVD Monitor - Health Check Script

CONFIG_FILE="/etc/nvd-monitor/config.ini"
LOG_FILE="/var/log/nvd-monitor/health-check.log"
EMAIL_ALERT=false

# Función para logging
log_message() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_FILE"
}

# Función para enviar alerta
send_alert() {
    local message="$1"
    log_message "ALERT: $message"
    
    if [ "$EMAIL_ALERT" = true ]; then
        echo "$message" | mail -s "NVD Monitor - Alerta de Salud" admin@localhost || true
    fi
}

# Verificar si el servicio está ejecutándose
check_service() {
    if systemctl is-active --quiet nvd-monitor; then
        log_message "✅ Servicio nvd-monitor activo"
        return 0
    else
        send_alert "❌ Servicio nvd-monitor no está ejecutándose"
        return 1
    fi
}

# Verificar conectividad de base de datos
check_database() {
    if nvd-monitor --test-db &>/dev/null; then
        log_message "✅ Conexión a base de datos OK"
        return 0
    else
        send_alert "❌ Error de conexión a base de datos"
        return 1
    fi
}

# Verificar API de NVD
check_nvd_api() {
    if nvd-monitor --test-nvd &>/dev/null; then
        log_message "✅ Conexión a NVD API OK"
        return 0
    else
        send_alert "❌ Error de conexión a NVD API"
        return 1
    fi
}

# Verificar configuración de email
check_email() {
    if nvd-monitor --test-email &>/dev/null; then
        log_message "✅ Configuración de email OK"
        return 0
    else
        send_alert "❌ Error en configuración de email"
        return 1
    fi
}

# Verificar espacio en disco
check_disk_space() {
    local usage=$(df /var/log/nvd-monitor | awk 'NR==2 {print $5}' | sed 's/%//')
    
    if [ "$usage" -lt 80 ]; then
        log_message "✅ Espacio en disco OK ($usage%)"
        return 0
    elif [ "$usage" -lt 90 ]; then
        send_alert "⚠️  Espacio en disco alto ($usage%)"
        return 1
    else
        send_alert "❌ Espacio en disco crítico ($usage%)"
        return 1
    fi
}

# Verificar logs recientes
check_recent_activity() {
    local last_log=$(find /var/log/nvd-monitor -name "*.log" -mmin -240 | head -1)
    
    if [ -n "$last_log" ]; then
        log_message "✅ Actividad reciente detectada"
        return 0
    else
        send_alert "⚠️  No hay actividad reciente en logs (últimas 4 horas)"
        return 1
    fi
}

# Función principal
main() {
    log_message "=== Iniciando health check ==="
    
    local exit_code=0
    
    check_service || exit_code=1
    check_database || exit_code=1
    check_nvd_api || exit_code=1
    check_email || exit_code=1
    check_disk_space || exit_code=1
    check_recent_activity || exit_code=1
    
    if [ $exit_code -eq 0 ]; then
        log_message "✅ Health check completado - Todo OK"
    else
        log_message "❌ Health check completado - Se encontraron problemas"
    fi
    
    log_message "=== Health check finalizado ==="
    exit $exit_code
}

# Verificar argumentos
if [ "$1" = "--email-alerts" ]; then
    EMAIL_ALERT=true
fi

main
EOF

chmod +x /tmp/health-check.sh

# =====================================
# Crontab setup para automatización
# =====================================

cat > /tmp/crontab-setup.sh << 'EOF'
#!/bin/bash

# Setup de crontab para NVD Monitor

echo "Configurando tareas automatizadas..."

# Crear entrada de crontab para el usuario nvd-monitor
cat > /tmp/nvd-monitor-crontab << 'CRON_EOF'
# NVD Monitor - Tareas automatizadas

# Backup diario a las 2:00 AM
0 2 * * * /var/lib/nvd-monitor/scripts/backup.sh

# Health check cada 30 minutos
*/30 * * * * /var/lib/nvd-monitor/scripts/health-check.sh

# Limpieza de logs antigua cada domingo a las 3:00 AM
0 3 * * 0 find /var/log/nvd-monitor -name "*.log.*" -mtime +30 -delete

# Reporte semanal de estadísticas cada lunes a las 9:00 AM
0 9 * * 1 /usr/local/bin/nvd-admin stats > /var/lib/nvd-monitor/reports/weekly-$(date +\%Y\%m\%d).txt
CRON_EOF

# Instalar crontab para el usuario nvd-monitor
crontab -u nvd-monitor /tmp/nvd-monitor-crontab

# Crear directorio de scripts si no existe
mkdir -p /var/lib/nvd-monitor/scripts
mkdir -p /var/lib/nvd-monitor/reports

# Copiar scripts
cp /tmp/backup.sh /var/lib/nvd-monitor/scripts/
cp /tmp/health-check.sh /var/lib/nvd-monitor/scripts/
chmod +x /var/lib/nvd-monitor/scripts/*.sh

# Configurar permisos
chown -R nvd-monitor:nvd-monitor /var/lib/nvd-monitor

echo "Tareas automatizadas configuradas:"
echo "  - Backup diario: 02:00"
echo "  - Health check: cada 30 minutos"
echo "  - Limpieza de logs: domingos 03:00"
echo "  - Reporte semanal: lunes 09:00"

# Limpiar archivos temporales
rm -f /tmp/nvd-monitor-crontab
rm -f /tmp/backup.sh
rm -f /tmp/health-check.sh

echo "Configuración de automatización completada"
EOF

chmod +x /tmp/crontab-setup.sh

# =====================================
# Script de actualización - update.sh
# =====================================

cat > /tmp/update.sh << 'EOF'
#!/bin/bash

# NVD Monitor - Script de Actualización

set -e

echo "=================================="
echo "  NVD Monitor - Actualización"
echo "=================================="

# Verificar que se ejecuta como root
if [[ $EUID -ne 0 ]]; then
   echo "Este script debe ejecutarse como root"
   exit 1
fi

# Crear backup antes de actualizar
echo "Creando backup antes de actualizar..."
/var/lib/nvd-monitor/scripts/backup.sh

# Detener servicio
echo "Deteniendo servicio..."
systemctl stop nvd-monitor

# Actualizar dependencias Python
echo "Actualizando dependencias Python..."
/opt/nvd-monitor/venv/bin/pip install --upgrade pip
/opt/nvd-monitor/venv/bin/pip install --upgrade -r /opt/nvd-monitor/requirements.txt

# Verificar configuración
echo "Verificando configuración..."
if ! nvd-monitor --test-db; then
    echo "Error: Problemas con la base de datos"
    exit 1
fi

# Iniciar servicio
echo "Iniciando servicio..."
systemctl start nvd-monitor

# Verificar estado
if systemctl is-active --quiet nvd-monitor; then
    echo "✅ Actualización completada exitosamente"
    echo "Servicio nvd-monitor está ejecutándose"
else
    echo "❌ Error: El servicio no pudo iniciarse"
    exit 1
fi

echo "Ver logs: journalctl -u nvd-monitor -f"
EOF

chmod +x /tmp/update.sh

# =====================================
# Completar script de instalación principal
# =====================================

echo '

# Copiar scripts adicionales
log_info "Instalando scripts adicionales..."
mkdir -p /var/lib/nvd-monitor/scripts

# Copiar scripts de utilidad
mv /tmp/backup.sh /var/lib/nvd-monitor/scripts/
mv /tmp/health-check.sh /var/lib/nvd-monitor/scripts/
mv /tmp/update.sh /usr/local/bin/nvd-update
mv /tmp/crontab-setup.sh /var/lib/nvd-monitor/scripts/

# Instalar comando de administración mejorado
curl -o /opt/nvd-monitor/nvd-admin.py https://raw.githubusercontent.com/ejemplo/nvd-monitor/main/nvd-admin.py 2>/dev/null || cp /dev/stdin > /opt/nvd-monitor/nvd-admin.py << '"'"'ADMIN_EOF'"'"'
# Aquí iría el contenido del script nvd-admin.py que creamos anteriormente
ADMIN_EOF

# Hacer ejecutables los scripts
chmod +x /var/lib/nvd-monitor/scripts/*.sh
chmod +x /usr/local/bin/nvd-update
chmod +x /opt/nvd-monitor/nvd-admin.py

# Crear enlace simbólico para nvd-admin
ln -sf /opt/nvd-monitor/venv/bin/python /opt/nvd-monitor/venv/bin/python3
cat > /usr/local/bin/nvd-admin << '"'"'EOF'"'"'
#!/bin/bash
cd /opt/nvd-monitor
exec ./venv/bin/python nvd-admin.py "$@"
EOF
chmod +x /usr/local/bin/nvd-admin

# Instalar dependencia adicional para tablas
/opt/nvd-monitor/venv/bin/pip install tabulate

# Configurar logrotate
cat > /etc/logrotate.d/nvd-monitor << '"'"'EOF'"'"'
/var/log/nvd-monitor/*.log {
    daily
    missingok
    rotate 30
    compress
    delaycompress
    notifempty
    create 644 nvd-monitor nvd-monitor
    postrotate
        systemctl reload nvd-monitor || true
    endscript
}
EOF

log_info "Configurando tareas automatizadas..."
/var/lib/nvd-monitor/scripts/crontab-setup.sh

log_info "Instalación completa finalizada"' >> /tmp/install_completion.sh

chmod +x /tmp/install_completion.sh

echo "Scripts adicionales creados:"
echo "  - /tmp/uninstall.sh (Desinstalación completa)"
echo "  - /tmp/backup.sh (Backup automatizado)"
echo "  - /tmp/health-check.sh (Verificación de salud)"
echo "  - /tmp/update.sh (Actualización del sistema)"
echo "  - /tmp/crontab-setup.sh (Configuración de tareas)"
echo "  - /tmp/install_completion.sh (Completar instalación)"
echo ""
echo "Para completar la instalación, ejecutar:"
echo "  sudo bash /tmp/install_completion.sh"
